{"version":3,"sources":["assets\\Script\\Common\\manage\\PondMgr.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import GameLog from \"./GameLogMgr\";\r\nimport LoadMgr from \"./LoadMgr\";\r\n\r\nexport default class PondMgr {\r\n\r\n    private static caches: { [key: string]: any } = {};\r\n\r\n    private static gamePool: { [key: string]: cc.NodePool } = {};   //对象池？\r\n\r\n    /**\r\n     * 新增对象池\r\n     * @param url 名称\r\n     * @param prefab 预制体\r\n     * @param cnt 个数\r\n     */\r\n    public static addToCaches(url: string, prefab: any, cnt: number = 1) {\r\n        if (url && prefab) {   //判断url 和预制体 是否为空\r\n            if (this.caches[url]) {\r\n                return false\r\n            }\r\n            this.caches[url] = prefab;\r\n            this.createToPool(url, cnt);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    private static createToPool(url: string, cnt: number = 1) {\r\n        //判断 url是否为空，或者 内存中已经存在\r\n        if (!url || !this.caches[url]) {\r\n            return;\r\n        }\r\n\r\n        //如果 gamePool 中没有存在 的话 ， 那么就创建一个 cc.Node\r\n        if (this.gamePool[url] == null) {\r\n            this.gamePool[url] = new cc.NodePool();\r\n        }\r\n\r\n        cnt -= this.gamePool[url].size();\r\n        for (let i = 0; i < cnt; i++) {\r\n            let item = cc.instantiate(this.caches[url]);\r\n            this.gamePool[url].put(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 放回对象池\r\n     */\r\n    public static putNodeToPool(url: string, item: cc.Node) {\r\n        if (item == null || url == \"\" || url == null) {\r\n            GameLog.warn('putNodeToPool fail', url, item);\r\n            return;\r\n        }\r\n\r\n        //该对象池不存在，重新创建\r\n        if (this.gamePool[url] == null) {\r\n            this.gamePool[url] = new cc.NodePool();\r\n        }\r\n        //清空父节点\r\n        item.parent = null;\r\n        this.gamePool[url].put(item);\r\n    }\r\n\r\n    /**\r\n     * 从对象池中获取一个节点\r\n     */\r\n    public static getNodeFromPool(url: string): cc.Node {\r\n        let item = null;\r\n        //如果对象池为空，则需要重新创建一下\r\n        if (this.gamePool[url] == null) {\r\n            this.gamePool[url] = new cc.NodePool();\r\n        }\r\n        if (this.gamePool[url].size() > 0) {\r\n            item = this.gamePool[url].get(); // 对象池 中如果已经存在这个节点了，直接去除就行\r\n        } else if (this.caches[url]) {\r\n            //没有存在这个节点的话 ，需要根据 caches 创建\r\n            item = cc.instantiate(this.caches[url]);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * 异步获取节点\r\n     * @param url  节点路径\r\n     * @param callFun   获取到之后的回调函数\r\n     */\r\n    public static getAsyncNodeToPool(url: string, callFun: any) {\r\n        if (!url) {\r\n            GameLog.warn(\"getAsyncNodeToPool\", \"url为空\");\r\n            return;\r\n        }\r\n        let item = this.getNodeFromPool(url);  // 先获取节点\r\n        if (item) {  //节点存在，调用回调\r\n            if (callFun) {\r\n                callFun(item);\r\n            }\r\n        } else {\r\n            //节点不存在，只能去加载咯 ，芜湖\r\n            LoadMgr.loadPrefab(url).then((prefab: cc.Prefab) => {\r\n                this.addToCaches(url, prefab);\r\n                item = this.getNodeFromPool(url);\r\n                if (callFun) {\r\n                    callFun(item);\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n"]}