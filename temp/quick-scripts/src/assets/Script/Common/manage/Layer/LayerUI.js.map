{"version":3,"sources":["assets\\Script\\Common\\manage\\Layer\\LayerUI.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import AudioMgr from \"../AudioMgr\";\r\nimport GameLog from \"../GameLogMgr\";\r\n\r\n/**\r\n * 这个是 封装了一些方法  ，例如 注册点击事件 销毁事件 等等\r\n */\r\nconst {ccclass} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class LayerUI extends cc.Component {\r\n\r\n    private _touchList: { [key: string]: { target, handler, callObj } } = {};\r\n    private _touchEndList: { [key: string]: { target, handler, callObj } } = {}\r\n\r\n    private _enableList: { [key: string]: { enabled: boolean, isGray: boolean } } = {};\r\n\r\n\r\n    /**\r\n     * 是否交互 需在target注册onTouch之后\r\n     * @param target\r\n     * @param v\r\n     * @param isGray\r\n     */\r\n    protected setInteractable(target: cc.Node, v: boolean, isGray: boolean = true) {\r\n        if (!target)\r\n            return;\r\n        let button: cc.Button = target.getComponent(cc.Button);\r\n        if (button) {\r\n            button.enableAutoGrayEffect = isGray;\r\n            button.interactable = v;\r\n        }\r\n        this._enableList[target.name] = {enabled: v, isGray};\r\n    }\r\n\r\n    /**\r\n     *  注册点击事件\r\n     * @param target    点击对象\r\n     * @param handler   触发事件\r\n     * @param sound     播放声音名称\r\n     * @param scale     缩放值\r\n     * @param stopEvent\r\n     */\r\n    protected onTouch(target: cc.Node, handler: Function, sound: string = \"click\", scale = 0.9, stopEvent = true) {\r\n        if (!target || !handler) {\r\n            GameLog.error(\"target || handler为空-->\", target, handler);\r\n            return;\r\n        }\r\n\r\n        let targetName: string = target.name;\r\n        if (this._touchList[targetName] && this._touchList[targetName].target == target) {\r\n            GameLog.warn(\"重复设置-->\", targetName);\r\n            return;\r\n        }\r\n\r\n        //添加一个button 动画\r\n        let button = target.getComponent(cc.Button);\r\n        if (scale != 1) {\r\n            if (!button) {\r\n                button = target.addComponent(cc.Button);\r\n                button.transition = cc.Button.Transition.SCALE;\r\n                button.zoomScale = scale;\r\n            }\r\n        }\r\n\r\n\r\n        let enabled = true;\r\n        let isGray = true;\r\n        if (this._enableList[target.name]) {\r\n            enabled = this._enableList[target.name].enabled;\r\n            isGray = this._enableList[target.name].isGray;\r\n        }\r\n\r\n        this.setInteractable(target, enabled, isGray);\r\n\r\n        let callObj = this;\r\n        let touchHandler = (event) => {\r\n            let {enabled = true} = this._enableList[target.name] || {};\r\n            if (!enabled) {\r\n                return;\r\n            }\r\n            if (stopEvent) {\r\n                event.stopPropagation();\r\n            }\r\n            if (sound && sound != \"\") {\r\n                // if (sound === \"check\") {\r\n                // sound = \"piano/a\" + Math.floor(Math.random() * (5 - 1) + 1);\r\n                // }\r\n                AudioMgr.play(sound).then();\r\n            }\r\n            handler.call(callObj, event);\r\n        };\r\n        target.on(cc.Node.EventType.TOUCH_START, touchHandler);\r\n        this._touchList[targetName] = {target: target, handler: touchHandler, callObj: callObj};\r\n    }\r\n\r\n    protected onTouchEnd(target: cc.Node, handler: Function) {\r\n        if (!target || !handler) {\r\n            GameLog.error(\"target || handle为空 ondTouchEnd -->\", target, handler)\r\n            return\r\n        }\r\n        let targetName: string = target.name\r\n        if (this._touchEndList[targetName] && this._touchEndList[targetName].target == target) {\r\n            GameLog.warn(\"重复设置 --> onTouchEnd \", targetName)\r\n        }\r\n\r\n        let callObj = this;\r\n        let touchHandler = (event) => {\r\n            handler.call(callObj, event);\r\n        };\r\n        target.on(cc.Node.EventType.TOUCH_END, touchHandler);\r\n        target.on(cc.Node.EventType.TOUCH_CANCEL, touchHandler);\r\n\r\n        this._touchEndList[targetName] = {target: target, handler: touchHandler, callObj: callObj};\r\n    }\r\n\r\n    protected offTouchEnd(target: cc.Node) {\r\n        if (!target) {\r\n            GameLog.error(\"target 为空 \")\r\n            return\r\n        }\r\n        let targetName: string = target.name\r\n        if (this._touchEndList[targetName]) {\r\n            let handler = this._touchEndList[targetName].handler\r\n            target.off(cc.Node.EventType.TOUCH_END, handler)\r\n            target.off(cc.Node.EventType.TOUCH_CANCEL, handler)\r\n            delete this._touchEndList[targetName]\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除对象点击事件\r\n     * @param target\r\n     */\r\n    protected offTouch(target: cc.Node) {\r\n        if (!target) {\r\n            GameLog.error(\"target 为空\");\r\n            return\r\n        }\r\n        let targetName: string = target.name;\r\n        if (this._touchList[targetName]) {\r\n            let touchHandler = this._touchList[targetName].handler;\r\n            target.off(cc.Node.EventType.TOUCH_START, touchHandler);\r\n            delete this._touchList[targetName]\r\n        }\r\n        delete this._enableList[targetName]\r\n    }\r\n\r\n\r\n    protected clear() {\r\n        for (let key in this._touchList) {\r\n            this.offTouch(this._touchList[key].target)\r\n        }\r\n    }\r\n\r\n    onDestroy() {\r\n        this.clear()\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param path 路径或者名字\r\n     */\r\n    protected getNode(path: string): cc.Node {\r\n        let node: cc.Node = null;\r\n        if (path == \"\" || !path)\r\n            return null;\r\n        if (path.indexOf(\"/\") != -1) {\r\n            node = cc.find(path, this.node);\r\n        } else {\r\n            node = this.node.getChildByName(path);\r\n        }\r\n\r\n        if (!node) {\r\n            GameLog.warn(\"未找到该节点  path=\", path);\r\n        }\r\n        return node;\r\n    }\r\n\r\n}\r\n"]}