{"version":3,"sources":["assets\\Script\\Common\\manage\\PanelMgr.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import CacheMgr from \"./CacheMgr\";\r\nimport LoadMgr from \"./LoadMgr\";\r\nimport Emit from \"./Emit/Emit\";\r\nimport {EventCode} from \"./Emit/EmitData\";\r\nimport LayerPanel from \"./Layer/LayerPanel\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n@ccclass\r\nexport default class PanelMgr extends cc.Component {\r\n    public static INS: PanelMgr\r\n    @property(\r\n        {\r\n            type: [cc.Node],\r\n            tooltip: \"只要将Game中的场景layer按照顺序赋值即可， 如果存在修改，需要到PannerMgr.ts中修改枚举变量 Layer,也是需要按照绑定顺序\"\r\n        }\r\n    )\r\n    public layers: cc.Node[] = []\r\n\r\n    //当前正在Loading 的面板\r\n    private LoadingList: Map<string, number> = new Map<string, number>()\r\n    //当前打开的面板数组\r\n    private openList: Map<string, cc.Node> = new Map<string, cc.Node>()\r\n    //当前关闭但是未摧毁的面板，存储在这里，下次打开该面板的时候，就会使用这里的面板\r\n    private hideList: Map<string, cc.Node> = new Map<string, cc.Node>()\r\n\r\n    onLoad() {\r\n        PanelMgr.INS = this\r\n        console.log('PanelMgr初始化完成')\r\n        Emit.instance().emit(EventCode.PanelMgrInitOK)\r\n    }\r\n\r\n    /**\r\n     * @param param{\r\n     *     layer : 在哪一个容器打开页面\r\n     *     panel: 打开面板\r\n     *     call : 打开成功回调 可选\r\n     *     param: 传递给下一个面板的参数\r\n     * }\r\n     */\r\n    openPanel(param: openParam) {\r\n        let layer = this.layers[param.layer]\r\n\r\n        console.log('param:',param,this.layers)\r\n        if (!layer) {\r\n            return\r\n        }\r\n\r\n        //加载分包\r\n        let urlInfo = param.panel.getUrl()\r\n\r\n        if (this.LoadingList.has(urlInfo.name)) {\r\n            return;\r\n        }\r\n\r\n        if (this.openList.has(param.panel.getUrl().name)) {\r\n            return;\r\n        }\r\n        this.LoadingList.set(urlInfo.name, 1) //添加一个加载标识， 防止重复添加\r\n        //todo  mask\r\n        let openPanelWay = () => {\r\n            let way = () => {\r\n                let panel: cc.Node = null\r\n                //判断有没有旧的panel可用，有的话就不重新实例化了\r\n                if (this.hideList.has(urlInfo.name)) {\r\n                    panel = this.hideList.get(urlInfo.name)\r\n                    panel.parent = layer\r\n                    panel.active = false\r\n                    // this.scheduleOnce(() => {\r\n                    this.openList.set(urlInfo.name, panel)\r\n                    this.showPanel(panel, param.param)\r\n                    this.LoadingList.delete(urlInfo.name)\r\n                    if (this.LoadingList.size == 0) {\r\n                        //todo mask\r\n                    }\r\n                    if (param.call) {\r\n                        param.call()\r\n                    }\r\n                    // }, 0)\r\n                } else {\r\n                    LoadMgr.loadPrefab(urlInfo.name, LoadMgr.getBundle(urlInfo.bundle)).then((prefab: cc.Prefab) => {\r\n                        panel = cc.instantiate(prefab)\r\n                        panel.parent = layer\r\n                        panel.active = false\r\n                        this.openList.set(urlInfo.name, panel)\r\n                        panel.getComponent(LayerPanel).initUI()\r\n                        this.showPanel(panel, param.param)\r\n                        this.LoadingList.delete(urlInfo.name)\r\n                        if (this.LoadingList.size == 0) {\r\n                            //todo mask\r\n                        }\r\n                        if (param.call) {\r\n                            param.call()\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n\r\n            if (LoadMgr.judgeBundleLoad(urlInfo.name)) {\r\n                way()\r\n            } else {\r\n                LoadMgr.loadBundle_Single(urlInfo.bundle).then(() => {\r\n                    way()\r\n                })\r\n            }\r\n        }\r\n        //没有配置立即准备打开目标panel\r\n        openPanelWay()\r\n    }\r\n\r\n    private showPanel(panel: cc.Node, param: any) {\r\n        let script = panel.getComponent(LayerPanel)\r\n        script.show(param)\r\n        panel.active = true\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param panel 需要关闭的面板\r\n     * @param destroy 是否需要彻底销毁这个面板\r\n     */\r\n    closePanel(panel: typeof LayerPanel, destroy = true) {\r\n        let node = this.openList.get(panel.getUrl().name)\r\n        if (!node) {\r\n            return\r\n        }\r\n\r\n        node.getComponent(LayerPanel).hide() //这里可以做清除代码\r\n\r\n        node.getComponent(LayerPanel).unscheduleAllCallbacks() //取消所有定时器\r\n        if (panel.getUrl().name == \"endView\") { //如果是endView的化 ，需要同步数据\r\n            CacheMgr.updateData();\r\n        }\r\n\r\n        node.parent = null\r\n        this.openList.delete(panel.getUrl().name)\r\n        if (destroy) {\r\n            node.getComponent(LayerPanel).onDestroyDo() //这里可以做清除代码\r\n            node.destroy()\r\n        } else {\r\n            this.hideList.set(panel.getUrl().name, node)\r\n        }\r\n    }\r\n\r\n    getPanel(panel: typeof LayerPanel): cc.Node {\r\n        return this.openList.get(panel.getUrl().name)\r\n    }\r\n}\r\n\r\nexport enum Layer {\r\n    gameLayer,\r\n    gameInfoLayer,\r\n    otherLayer,\r\n    nativeLayer,\r\n}\r\n\r\nexport enum View {\r\n    endView,\r\n    gameView,\r\n    homeView,\r\n}\r\n\r\nexport interface openParam {\r\n    layer: Layer,\r\n    panel: typeof LayerPanel,\r\n    call?: Function,\r\n    param?: any\r\n}\r\n\r\n"]}